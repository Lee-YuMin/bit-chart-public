{"version":3,"sources":["Util.js","App.js","reportWebVitals.js","index.js"],"names":["formatDate","date","getFullYear","getMonth","slice","getDate","dateDiff","_date1","_date2","diffDate_1","Date","diffDate_2","diff","Math","abs","getTime","ceil","addTime","paramType","param","unit","number_format","number","round","reg","n","Number","pow","test","replace","App","useState","coinName","setCoinName","startDate","setStartDate","Util","endDate","setEndDate","investMoney","setInvestMoney","buyRate","setBuyRateDate","bitData","setBitData","maxCount","totalCoinCount","handleSubmit","e","a","preventDefault","alert","diffDate","result","i","count","fetch","response","json","ok","push","reverse","className","id","onSubmit","type","name","value","onChange","target","download","href","onClick","ExcellentExport","convert","anchor","filename","format","from","table","document","querySelector","width","length","map","data","index","investedMoney","buyPrice","openingPrice","coinCount","totalPrice","tradePrice","rateOfReturn","upDownRate","upDownClass","upDownBoldClass","returnClass","candleDateTime","substr","highPrice","lowPrice","window","scrollTo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.868315e8.chunk.js","sourcesContent":["export function getToday(){\n    var date = new Date();\n    var year = date.getFullYear();\n    var month = (\"0\" + (1 + date.getMonth())).slice(-2);\n    var day = (\"0\" + date.getDate()).slice(-2);\n\n    return year + \"-\" + month + \"-\" + day;\n}\n\nexport function formatDate(date){\n    var year = date.getFullYear();\n    var month = (\"0\" + (1 + date.getMonth())).slice(-2);\n    var day = (\"0\" + date.getDate()).slice(-2);\n\n    return year + \"-\" + month + \"-\" + day;\n}\n\n// 두개의 날짜를 비교하여 차이를 알려준다.\nexport function dateDiff(_date1, _date2) {\n    var diffDate_1 = new Date(_date1);\n    var diffDate_2 = new Date(_date2);\n \n    diffDate_1 =new Date(diffDate_1.getFullYear(), diffDate_1.getMonth()+1, diffDate_1.getDate());\n    diffDate_2 =new Date(diffDate_2.getFullYear(), diffDate_2.getMonth()+1, diffDate_2.getDate());\n \n    var diff = Math.abs(diffDate_2.getTime() - diffDate_1.getTime());\n    diff = Math.ceil(diff / (1000 * 3600 * 24));\n \n    return diff;\n}\n\nexport function addTime (date, paramType, param) {\n  let unit = 0;\n  if (paramType === 'day') {\n    unit = 1000 * 60 * 60 * 24; // 일 단위\n  } else if (paramType === 'hour') {\n    unit = 1000 * 60 * 60; // 시간\n  } else if (paramType === 'minute') {\n    unit = 1000 * 60; // 분\n  }\n  return new Date(new Date(date).getTime() + unit * param);\n};\n\nexport function number_format (number, round = 4){\n    if(number==0) return 0;\n    number = Math.round(Number(number) * Math.pow(10, round)) / Math.pow(10, round); \n        \n    var reg = /(^[+-]?\\d+)(\\d{3})/;\n    var n = (number + '');\n    while (reg.test(n)) n = n.replace(reg, '$1' + ',' + '$2');\n\n    return n;\n};","import './App.css';\nimport { useState, useEffect } from 'react';\nimport * as Util from './Util';\nimport ExcellentExport from 'excellentexport';\n// import ReactExport from 'react-data-export';\n\n// const ExcelFile = ReactExport.ExcelFile;\n// const ExcelSheet = ReactExport.ExcelFile.ExcelSheet;\nconst excelHeader = [\n  {\n    value: '날짜',\n    widthPx: 160,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '고가',\n    widthPx: 100,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '저가',\n    widthPx: 100,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '시작가',\n    widthPx: 100,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '마감가',\n    widthPx: 100,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '등락률',\n    widthPx: 100,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '투자금',\n    widthPx: 120,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '구매 개수',\n    widthPx: 120,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '매매가',\n    widthPx: 120,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '총 코인 개수',\n    widthPx: 150,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '최종 금액',\n    widthPx: 200,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n  {\n    value: '수익률',\n    widthPx: 100,\n    style: { font: { sz: '24', bold: true }, fill: { patternType: 'solid', color: { rgb: '#cbddff' } } },\n  },\n];\n\nfunction App() {\n  const [coinName, setCoinName] = useState('WAXP');\n  const [startDate, setStartDate] = useState('2017-09-25');\n  const [endDate, setEndDate] = useState(Util.getToday());\n  // const [startDate, setStartDate] = useState('2020-09-25');\n  // const [endDate, setEndDate] = useState('2020-10-20');\n  const [investMoney, setInvestMoney] = useState('50000');\n  const [buyRate, setBuyRateDate] = useState('-8');\n  const [bitData, setBitData] = useState([]);\n  const [excelData, setExcelData] = useState([]);\n  const maxCount = 400;\n  let totalCoinCount = 0;\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // 필수 값 체크\n    if(!coinName || !startDate || !endDate || !investMoney || !buyRate) {\n      alert('필수 값 오류');\n      return false;\n    }\n    \n    const diffDate = Util.dateDiff(endDate, startDate);\n    let result = [];\n    let date = '';\n\n    for(let i=diffDate; i>0; i-= i > maxCount ? maxCount : i) {\n      let count = i > maxCount ? maxCount : i;\n      date = Util.addTime(startDate, 'day', '+' + (i - 1));\n\n      let response = await fetch(`https://crix-api-cdn.upbit.com/v1/crix/candles/days?code=CRIX.UPBIT.KRW-${coinName}&count=${count}&to=${Util.formatDate(date)}T17:43:40Z`);\n      let json;\n      if (response.ok) {\n        json = await response.json();\n      } else {\n        alert('데이터 오류');\n        return false;\n      }\n\n      result.push(...json);\n    }\n\n\n    setBitData(result.reverse());\n    // downloadExcel(result.reverse());\n  }\n\n  const goToTop = () => {\n    window.scrollTo(0, 0);\n  }\n\n  // const downloadExcel = (bitData) => {\n  //   let excel = {};\n  //   excel['columns'] = excelHeader;\n  //   excel['data'] = [];\n\n  //   bitData.forEach((data, index) => {\n  //     let arr = [];\n  //     let investedMoney = investMoney * (index + 1);\n  //     let buyPrice = data.openingPrice * ((100 + Number(buyRate)) * 0.01);\n  //     let coinCount = investMoney / buyPrice;\n  //     totalCoinCount += coinCount;\n  //     let totalPrice = data.tradePrice * totalCoinCount;\n  //     let rateOfReturn = totalPrice / investedMoney;\n  //     let upDownRate = (1 - (data.tradePrice / data.openingPrice)) * 100 * -1;\n  //     let upDownClass = upDownRate > 0 ? '#d60000' : '#0051c7';\n  //     let upDownBoldClass = Math.abs(upDownRate) > 10;\n  //     let returnClass = rateOfReturn > 1 ? '#d60000' : '#0051c7';\n\n  //     arr.push({ value: data.candleDateTime.substr(0,10), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(data.highPrice), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(data.lowPrice), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(data.openingPrice), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(data.tradePrice), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(upDownRate), style: { font: { sz: '24', bold: upDownBoldClass, color: { rgb: upDownClass } }} });\n  //     arr.push({ value: Util.number_format(investedMoney), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(coinCount), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(buyPrice), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(totalCoinCount), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(totalPrice), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(totalPrice), style: { font: { sz: '24' }} });\n  //     arr.push({ value: Util.number_format(rateOfReturn), style: { font: { sz: '24', color: { rgb: returnClass } }} });\n      \n  //     excel['data'] = arr;\n  //   });\n\n  //   setExcelData([excel]);\n\n\n  //   console.log([excel]);\n  // }\n\n  const downloadExcel = (e) => {\n    ExcellentExport.convert({\n     anchor: e.target, \n     filename: `${coinName}_${startDate}~${endDate}`, \n     format: 'xlsx'\n    },[{\n      name: 'Sheet1', \n      from: {table: document.querySelector('#bit-table')}\n    }]);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"form-container\">\n        <form id=\"form-search\" onSubmit={handleSubmit} >\n          <div className=\"row-search\" >\n            <label className=\"label-search\">\n              코인 이름: \n              <input type=\"text\" name=\"coin_name\" value={coinName} onChange={e => setCoinName(e.target.value)}  />\n            </label>\n          </div>\n\n          <div className=\"row-search\" >\n            <label className=\"label-search\">\n              시작 날짜: \n              <input type=\"text\" name=\"start_date\" value={startDate} onChange={e => setStartDate(e.target.value)}  />\n            </label>\n\n            <label className=\"label-search\">\n              종료 날짜: \n              <input type=\"text\" name=\"end_date\" value={endDate} onChange={e => setEndDate(e.target.value)}  />\n            </label>\n          </div>\n          \n          <div className=\"row-search\">\n            <label className=\"label-search\">\n              일별 투자금: \n              <input type=\"text\" name=\"investMoney\" value={investMoney} onChange={e => setInvestMoney(e.target.value)} />\n            </label>\n\n            <label className=\"label-search\">\n              매입가: \n              <input type=\"text\" name=\"buy_rate\" value={buyRate} onChange={e => setBuyRateDate(e.target.value)} /> %\n            </label>\n          </div>\n\n          <input className=\"btn-submit\" type=\"submit\" value=\" 출력 \" />\n\n          {/* <button className=\"btnExcelDownload\" onClick={downloadExcel}>엑셀 다운로드</button> */}\n          {/* <ExcelFile element={<button id=\"btnExcelDownload\" className=\"btnExcelDownload\" >엑셀 다운로드</button>}>\n            <ExcelSheet dataSet={excelData} name=\"WAXP_2017-09-25_2021-05-15\">\n            </ExcelSheet>\n          </ExcelFile> */}\n\n          <a download=\"somedata.xlsx\" href=\"#\" id=\"btnExcelDownload\" className=\"btnExcelDownload\" onClick={downloadExcel}>엑셀 다운로드</a>\n        </form>\n      </div>\n\n      <div className=\"grid-container\">\n        <table className=\"bit-table header\">\n          <colgroup>\n            <col width=\"120px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"120px\" />\n            <col width=\"120px\" />\n            <col width=\"120px\" />\n            <col width=\"150px\" />\n            <col width=\"200px\" />\n            <col width=\"100px\" />\n          </colgroup>\n          <thead>\n            <tr>\n              <th>날짜</th>\n              <th>고가</th>\n              <th>저가</th>\n              <th>시작가</th>\n              <th>마감가</th>\n              <th>등락률</th>\n              <th>투자금</th>\n              <th>구매 개수</th>\n              <th>매매가</th>\n              <th>총 코인 개수</th>\n              <th>최종 금액</th>\n              <th>수익률</th>\n            </tr>\n          </thead>\n        </table>\n\n        <table id=\"bit-table\" className=\"bit-table\" >\n          <colgroup>\n            <col width=\"120px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"100px\" />\n            <col width=\"120px\" />\n            <col width=\"120px\" />\n            <col width=\"120px\" />\n            <col width=\"150px\" />\n            <col width=\"200px\" />\n            <col width=\"100px\" />\n          </colgroup>\n          <thead className=\"bit-table-header\">\n            <tr>\n              <th>날짜</th>\n              <th>고가</th>\n              <th>저가</th>\n              <th>시작가</th>\n              <th>마감가</th>\n              <th>등락률</th>\n              <th>투자금</th>\n              <th>구매 개수</th>\n              <th>매매가</th>\n              <th>총 코인 개수</th>\n              <th>최종 금액</th>\n              <th>수익률</th>\n            </tr>\n          </thead>\n          <tbody>\n            {bitData.length > 0 && bitData.map((data, index) => {\n              let investedMoney = investMoney * (index + 1);\n              let buyPrice = data.openingPrice * ((100 + Number(buyRate)) * 0.01);\n              let coinCount = investMoney / buyPrice;\n              totalCoinCount += coinCount;\n              let totalPrice = data.tradePrice * totalCoinCount;\n              let rateOfReturn = totalPrice / investedMoney;\n              let upDownRate = (1 - (data.tradePrice / data.openingPrice)) * 100 * -1;\n              \n              let upDownClass = upDownRate > 0 ? 'plus-return ' : 'minus-return ';\n              let upDownBoldClass = Math.abs(upDownRate) > 10 ? 'bold ' : '';\n              let returnClass = rateOfReturn > 1 ? 'plus-return ' : 'minus-return ';\n\n              return (\n                <tr key={'tr_' + index}>\n                  <td>{data.candleDateTime.substr(0,10)}</td>\n                  <td>{Util.number_format(data.highPrice)}</td>\n                  <td>{Util.number_format(data.lowPrice)}</td>\n                  <td>{Util.number_format(data.openingPrice)}</td>\n                  <td>{Util.number_format(data.tradePrice)}</td>\n                  <td className={upDownClass + upDownBoldClass} >{Util.number_format(upDownRate)}</td>\n                  <td>{Util.number_format(investedMoney)}</td>\n                  <td>{Util.number_format(coinCount)}</td>\n                  <td>{Util.number_format(buyPrice)}</td>\n                  <td>{Util.number_format(totalCoinCount)}</td>\n                  <td>{Util.number_format(totalPrice, 0)}</td>\n                  <td className={returnClass}>{Util.number_format(rateOfReturn)}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n\n      <input className=\"btn-top\" type=\"button\" value=\"맨 위로\" onClick={goToTop} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}